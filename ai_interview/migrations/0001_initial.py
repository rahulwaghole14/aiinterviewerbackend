# Generated by Django 5.1.6 on 2025-08-13 06:33

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('interviews', '0004_remove_interviewslot_interviews__status_363eb9_idx_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIInterviewQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_index', models.PositiveIntegerField()),
                ('question_type', models.CharField(choices=[('technical', 'Technical Question'), ('behavioral', 'Behavioral Question'), ('coding', 'Coding Question'), ('system_design', 'System Design Question'), ('general', 'General Question')], max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('question_text', models.TextField()),
                ('question_context', models.JSONField(default=dict, help_text='Additional context for the question')),
                ('ai_model_prompt', models.TextField(blank=True, help_text='Prompt sent to AI model')),
                ('ai_model_response', models.TextField(blank=True, help_text='Response from AI model')),
                ('question_asked_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('response_received_at', models.DateTimeField(blank=True, null=True)),
                ('response_time', models.FloatField(blank=True, help_text='Response time in seconds', null=True)),
                ('is_answered', models.BooleanField(default=False)),
                ('is_correct', models.BooleanField(blank=True, null=True)),
                ('score', models.FloatField(blank=True, help_text='Score for this question (0-100)', null=True)),
                ('ai_feedback', models.TextField(blank=True, help_text='AI feedback on the answer')),
                ('human_feedback', models.TextField(blank=True, help_text='Human reviewer feedback')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ai_interview_question',
                'ordering': ['session', 'question_index'],
            },
        ),
        migrations.CreateModel(
            name='AIInterviewSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('error', 'Error')], default='active', max_length=20)),
                ('model_name', models.CharField(default='default_ai_model', max_length=100)),
                ('model_version', models.CharField(default='1.0', max_length=50)),
                ('ai_configuration', models.JSONField(default=dict, help_text='AI model configuration parameters')),
                ('current_question_index', models.PositiveIntegerField(default=0)),
                ('total_questions', models.PositiveIntegerField(default=0)),
                ('session_started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('session_ended_at', models.DateTimeField(blank=True, null=True)),
                ('response_time_avg', models.FloatField(default=0.0, help_text='Average response time in seconds')),
                ('questions_answered', models.PositiveIntegerField(default=0)),
                ('session_duration', models.PositiveIntegerField(default=0, help_text='Session duration in seconds')),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('interview', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_session', to='interviews.interview')),
            ],
            options={
                'db_table': 'ai_interview_session',
            },
        ),
        migrations.CreateModel(
            name='AIInterviewResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_score', models.FloatField(default=0.0, help_text='Overall interview score (0-100)')),
                ('technical_score', models.FloatField(default=0.0, help_text='Technical questions score (0-100)')),
                ('behavioral_score', models.FloatField(default=0.0, help_text='Behavioral questions score (0-100)')),
                ('coding_score', models.FloatField(default=0.0, help_text='Coding questions score (0-100)')),
                ('questions_attempted', models.PositiveIntegerField(default=0)),
                ('questions_correct', models.PositiveIntegerField(default=0)),
                ('average_response_time', models.FloatField(default=0.0, help_text='Average response time in seconds')),
                ('completion_time', models.PositiveIntegerField(default=0, help_text='Total completion time in seconds')),
                ('ai_summary', models.TextField(blank=True, help_text='AI-generated interview summary')),
                ('ai_recommendations', models.TextField(blank=True, help_text='AI recommendations')),
                ('strengths', models.JSONField(default=list, help_text='Candidate strengths identified')),
                ('weaknesses', models.JSONField(default=list, help_text='Areas for improvement')),
                ('overall_rating', models.CharField(default='pending', help_text='excellent, good, average, poor, pending', max_length=20)),
                ('hire_recommendation', models.BooleanField(blank=True, help_text='AI recommendation to hire', null=True)),
                ('confidence_level', models.FloatField(default=0.0, help_text='AI confidence in evaluation (0-100)')),
                ('human_rating', models.CharField(blank=True, help_text='Human reviewer rating', max_length=20)),
                ('human_feedback', models.TextField(blank=True, help_text='Human reviewer feedback')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('human_reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_interview_reviews', to=settings.AUTH_USER_MODEL)),
                ('interview', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_result', to='interviews.interview')),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='ai_interview.aiinterviewsession')),
            ],
            options={
                'db_table': 'ai_interview_result',
            },
        ),
        migrations.CreateModel(
            name='AIInterviewResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('response_text', models.TextField()),
                ('response_type', models.CharField(default='text', help_text='text, audio, video, code', max_length=20)),
                ('response_data', models.JSONField(default=dict, help_text='Additional response data (audio/video URLs, code files, etc.)')),
                ('response_submitted_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('response_duration', models.PositiveIntegerField(default=0, help_text='Time taken to respond in seconds')),
                ('ai_evaluation', models.JSONField(default=dict, help_text='AI evaluation of the response')),
                ('ai_score', models.FloatField(blank=True, help_text='AI score for this response (0-100)', null=True)),
                ('ai_feedback', models.TextField(blank=True, help_text='AI feedback on the response')),
                ('response_length', models.PositiveIntegerField(default=0, help_text='Length of response in characters')),
                ('confidence_score', models.FloatField(blank=True, help_text='AI confidence in evaluation', null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='ai_interview.aiinterviewquestion')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='ai_interview.aiinterviewsession')),
            ],
            options={
                'db_table': 'ai_interview_response',
            },
        ),
        migrations.AddField(
            model_name='aiinterviewquestion',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='ai_interview.aiinterviewsession'),
        ),
        migrations.AddIndex(
            model_name='aiinterviewsession',
            index=models.Index(fields=['status', 'session_started_at'], name='ai_intervie_status_9b3e41_idx'),
        ),
        migrations.AddIndex(
            model_name='aiinterviewsession',
            index=models.Index(fields=['interview', 'status'], name='ai_intervie_intervi_b261de_idx'),
        ),
        migrations.AddIndex(
            model_name='aiinterviewresult',
            index=models.Index(fields=['total_score', 'overall_rating'], name='ai_intervie_total_s_cd4570_idx'),
        ),
        migrations.AddIndex(
            model_name='aiinterviewresult',
            index=models.Index(fields=['interview', 'overall_rating'], name='ai_intervie_intervi_559e69_idx'),
        ),
        migrations.AddIndex(
            model_name='aiinterviewresponse',
            index=models.Index(fields=['session', 'response_submitted_at'], name='ai_intervie_session_55c32e_idx'),
        ),
        migrations.AddIndex(
            model_name='aiinterviewresponse',
            index=models.Index(fields=['question', 'response_submitted_at'], name='ai_intervie_questio_8d712c_idx'),
        ),
        migrations.AddIndex(
            model_name='aiinterviewquestion',
            index=models.Index(fields=['session', 'question_index'], name='ai_intervie_session_223e3b_idx'),
        ),
        migrations.AddIndex(
            model_name='aiinterviewquestion',
            index=models.Index(fields=['question_type', 'difficulty'], name='ai_intervie_questio_29fac2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='aiinterviewquestion',
            unique_together={('session', 'question_index')},
        ),
    ]
